
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD COLON COMA COUT CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE ELSEIF END EQUAL FLOAT GREATERTHAN ID IF INT LEFTBRACE LEFTPARENTHESIS LESSTHAN MINUS MULTIPLY NOT PROGRAM RIGHTBRACE RIGHTPARENTHESIS SEMICOLON VAR WHILEprogram : PROGRAM ID SEMICOLON r body ENDr : vars\n             | emptyvars : VAR oo : s ps : IDp : COMA o\n             | COLON type SEMICOLON qq : empty\n             | obody : LEFTBRACE m RIGHTBRACEm : statement m\n             | emptystatement : assign\n                     | condition\n                     | cycle\n                     | printassign : id_assign equal_assign expression SEMICOLONid_assign : IDequal_assign : EQUALcycle : do_cycle body WHILE l_par_cycle expression r_par_cycle SEMICOLONdo_cycle : DOl_par_cycle : LEFTPARENTHESISr_par_cycle : RIGHTPARENTHESIScondition : IF left_par_condition expression right_par_condition body ef SEMICOLONleft_par_condition : LEFTPARENTHESISright_par_condition : RIGHTPARENTHESISef : empty\n              | l\n              | elif_ef left_par_ef expression right_par_ef body lelif_ef : ELSEIFleft_par_ef : LEFTPARENTHESISright_par_ef : RIGHTPARENTHESISl : else_condition bodyelse_condition : ELSEexpression : exp jj : empty\n             | k expk : GREATERTHAN\n             | LESSTHAN\n             | NOTprint : cout_print LEFTPARENTHESIS g RIGHTPARENTHESIS semicolon_printcout_print : COUTg : h ih : expression_print\n             | CTE_STRINGexpression_print : expressioni : empty\n             | COMA gsemicolon_print : SEMICOLONexp : term ee : empty\n             | f expf : ADD\n             | MINUSterm : factor cc : empty\n             | d termd : MULTIPLY\n             | DIVIDEfactor : left_par_factor expression right_par_factor\n                  | a bleft_par_factor : LEFTPARENTHESISright_par_factor : RIGHTPARENTHESISa : empty\n             | ADD\n             | MINUSb : ID\n             | ctetype : INT\n                | FLOATcte : CTE_INT\n            | CTE_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,8,10,16,18,19,20,21,30,34,35,36,37,39,48,49,50,51,52,53,61,62,65,66,67,68,71,72,73,76,77,78,87,88,92,103,104,115,116,117,119,],[3,13,26,26,-14,-15,-16,-17,13,-74,-20,-74,-26,-74,-74,81,-63,-65,-66,-67,13,-18,-74,-39,-40,-41,-74,-54,-55,-74,-59,-60,-74,-23,-74,-42,-50,-25,-74,-32,-21,]),'SEMICOLON':([3,32,41,42,43,44,45,46,47,63,64,69,70,74,75,80,81,82,83,84,89,96,97,98,99,100,101,106,107,108,113,114,118,124,],[4,-11,61,-70,-71,62,-74,-74,-74,-36,-37,-51,-52,-56,-57,-62,-68,-69,-72,-73,104,-38,-53,-58,-61,-64,-74,115,-28,-29,119,-24,-34,-30,]),'VAR':([4,],[8,]),'LEFTBRACE':([4,5,6,7,11,24,27,29,40,61,85,86,93,94,95,110,112,121,122,],[-74,10,-2,-3,-4,10,-22,-5,-7,-74,10,-27,-8,-9,-10,10,-35,10,-33,]),'END':([9,32,],[14,-11,]),'RIGHTBRACE':([10,15,16,17,18,19,20,21,33,62,103,104,115,119,],[-74,32,-74,-13,-14,-15,-16,-17,-12,-18,-42,-50,-25,-21,]),'IF':([10,16,18,19,20,21,62,103,104,115,119,],[23,23,-14,-15,-16,-17,-18,-42,-50,-25,-21,]),'DO':([10,16,18,19,20,21,62,103,104,115,119,],[27,27,-14,-15,-16,-17,-18,-42,-50,-25,-21,]),'COUT':([10,16,18,19,20,21,62,103,104,115,119,],[28,28,-14,-15,-16,-17,-18,-42,-50,-25,-21,]),'COMA':([12,13,45,46,47,57,58,59,60,63,64,69,70,74,75,80,81,82,83,84,96,97,98,99,100,],[30,-6,-74,-74,-74,92,-45,-46,-47,-36,-37,-51,-52,-56,-57,-62,-68,-69,-72,-73,-38,-53,-58,-61,-64,]),'COLON':([12,13,],[31,-6,]),'EQUAL':([22,26,],[35,-19,]),'LEFTPARENTHESIS':([23,25,28,34,35,36,37,39,48,50,55,65,66,67,68,71,72,73,76,77,78,87,88,92,109,111,116,117,],[37,39,-43,50,-20,50,-26,50,50,-63,88,50,-39,-40,-41,50,-54,-55,50,-59,-60,50,-23,50,117,-31,50,-32,]),'INT':([31,],[42,]),'FLOAT':([31,],[43,]),'WHILE':([32,38,],[-11,55,]),'ELSEIF':([32,101,],[-11,111,]),'ELSE':([32,101,123,],[-11,112,112,]),'ADD':([34,35,36,37,39,46,47,48,50,65,66,67,68,71,72,73,74,75,76,77,78,80,81,82,83,84,87,88,92,98,99,100,116,117,],[52,-20,52,-26,52,72,-74,52,-63,52,-39,-40,-41,52,-54,-55,-56,-57,52,-59,-60,-62,-68,-69,-72,-73,52,-23,52,-58,-61,-64,52,-32,]),'MINUS':([34,35,36,37,39,46,47,48,50,65,66,67,68,71,72,73,74,75,76,77,78,80,81,82,83,84,87,88,92,98,99,100,116,117,],[53,-20,53,-26,53,73,-74,53,-63,53,-39,-40,-41,53,-54,-55,-56,-57,53,-59,-60,-62,-68,-69,-72,-73,53,-23,53,-58,-61,-64,53,-32,]),'CTE_INT':([34,35,36,37,39,48,49,50,51,52,53,65,66,67,68,71,72,73,76,77,78,87,88,92,116,117,],[-74,-20,-74,-26,-74,-74,83,-63,-65,-66,-67,-74,-39,-40,-41,-74,-54,-55,-74,-59,-60,-74,-23,-74,-74,-32,]),'CTE_FLOAT':([34,35,36,37,39,48,49,50,51,52,53,65,66,67,68,71,72,73,76,77,78,87,88,92,116,117,],[-74,-20,-74,-26,-74,-74,84,-63,-65,-66,-67,-74,-39,-40,-41,-74,-54,-55,-74,-59,-60,-74,-23,-74,-74,-32,]),'CTE_STRING':([39,92,],[59,59,]),'RIGHTPARENTHESIS':([45,46,47,54,56,57,58,59,60,63,64,69,70,74,75,79,80,81,82,83,84,90,91,96,97,98,99,100,102,105,120,],[-74,-74,-74,86,89,-74,-45,-46,-47,-36,-37,-51,-52,-56,-57,100,-62,-68,-69,-72,-73,-44,-48,-38,-53,-58,-61,-64,114,-49,122,]),'GREATERTHAN':([45,46,47,69,70,74,75,80,81,82,83,84,97,98,99,100,],[66,-74,-74,-51,-52,-56,-57,-62,-68,-69,-72,-73,-53,-58,-61,-64,]),'LESSTHAN':([45,46,47,69,70,74,75,80,81,82,83,84,97,98,99,100,],[67,-74,-74,-51,-52,-56,-57,-62,-68,-69,-72,-73,-53,-58,-61,-64,]),'NOT':([45,46,47,69,70,74,75,80,81,82,83,84,97,98,99,100,],[68,-74,-74,-51,-52,-56,-57,-62,-68,-69,-72,-73,-53,-58,-61,-64,]),'MULTIPLY':([47,80,81,82,83,84,99,100,],[77,-62,-68,-69,-72,-73,-61,-64,]),'DIVIDE':([47,80,81,82,83,84,99,100,],[78,-62,-68,-69,-72,-73,-61,-64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'r':([4,],[5,]),'vars':([4,],[6,]),'empty':([4,10,16,34,36,39,45,46,47,48,57,61,65,71,76,87,92,101,116,],[7,17,17,51,51,51,64,70,75,51,91,94,51,51,51,51,51,107,51,]),'body':([5,24,85,110,121,],[9,38,101,118,123,]),'o':([8,30,61,],[11,40,95,]),'s':([8,30,61,],[12,12,12,]),'m':([10,16,],[15,33,]),'statement':([10,16,],[16,16,]),'assign':([10,16,],[18,18,]),'condition':([10,16,],[19,19,]),'cycle':([10,16,],[20,20,]),'print':([10,16,],[21,21,]),'id_assign':([10,16,],[22,22,]),'do_cycle':([10,16,],[24,24,]),'cout_print':([10,16,],[25,25,]),'p':([12,],[29,]),'equal_assign':([22,],[34,]),'left_par_condition':([23,],[36,]),'type':([31,],[41,]),'expression':([34,36,39,48,87,92,116,],[44,54,60,79,102,60,120,]),'exp':([34,36,39,48,65,71,87,92,116,],[45,45,45,45,96,97,45,45,45,]),'term':([34,36,39,48,65,71,76,87,92,116,],[46,46,46,46,46,46,98,46,46,46,]),'factor':([34,36,39,48,65,71,76,87,92,116,],[47,47,47,47,47,47,47,47,47,47,]),'left_par_factor':([34,36,39,48,65,71,76,87,92,116,],[48,48,48,48,48,48,48,48,48,48,]),'a':([34,36,39,48,65,71,76,87,92,116,],[49,49,49,49,49,49,49,49,49,49,]),'g':([39,92,],[56,105,]),'h':([39,92,],[57,57,]),'expression_print':([39,92,],[58,58,]),'j':([45,],[63,]),'k':([45,],[65,]),'e':([46,],[69,]),'f':([46,],[71,]),'c':([47,],[74,]),'d':([47,],[76,]),'b':([49,],[80,]),'cte':([49,],[82,]),'right_par_condition':([54,],[85,]),'l_par_cycle':([55,],[87,]),'i':([57,],[90,]),'q':([61,],[93,]),'right_par_factor':([79,],[99,]),'semicolon_print':([89,],[103,]),'ef':([101,],[106,]),'l':([101,123,],[108,124,]),'elif_ef':([101,],[109,]),'else_condition':([101,123,],[110,110,]),'r_par_cycle':([102,],[113,]),'left_par_ef':([109,],[116,]),'right_par_ef':([120,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON r body END','program',6,'p_program','Scanner_Parser_Patito.py',206),
  ('r -> vars','r',1,'p_r','Scanner_Parser_Patito.py',233),
  ('r -> empty','r',1,'p_r','Scanner_Parser_Patito.py',234),
  ('vars -> VAR o','vars',2,'p_vars','Scanner_Parser_Patito.py',238),
  ('o -> s p','o',2,'p_o','Scanner_Parser_Patito.py',241),
  ('s -> ID','s',1,'p_s','Scanner_Parser_Patito.py',244),
  ('p -> COMA o','p',2,'p_p','Scanner_Parser_Patito.py',256),
  ('p -> COLON type SEMICOLON q','p',4,'p_p','Scanner_Parser_Patito.py',257),
  ('q -> empty','q',1,'p_q','Scanner_Parser_Patito.py',260),
  ('q -> o','q',1,'p_q','Scanner_Parser_Patito.py',261),
  ('body -> LEFTBRACE m RIGHTBRACE','body',3,'p_body','Scanner_Parser_Patito.py',265),
  ('m -> statement m','m',2,'p_m','Scanner_Parser_Patito.py',268),
  ('m -> empty','m',1,'p_m','Scanner_Parser_Patito.py',269),
  ('statement -> assign','statement',1,'p_statement','Scanner_Parser_Patito.py',273),
  ('statement -> condition','statement',1,'p_statement','Scanner_Parser_Patito.py',274),
  ('statement -> cycle','statement',1,'p_statement','Scanner_Parser_Patito.py',275),
  ('statement -> print','statement',1,'p_statement','Scanner_Parser_Patito.py',276),
  ('assign -> id_assign equal_assign expression SEMICOLON','assign',4,'p_assign','Scanner_Parser_Patito.py',281),
  ('id_assign -> ID','id_assign',1,'p_id_assign','Scanner_Parser_Patito.py',299),
  ('equal_assign -> EQUAL','equal_assign',1,'p_equal_assign','Scanner_Parser_Patito.py',310),
  ('cycle -> do_cycle body WHILE l_par_cycle expression r_par_cycle SEMICOLON','cycle',7,'p_cycle','Scanner_Parser_Patito.py',316),
  ('do_cycle -> DO','do_cycle',1,'p_do_cycle','Scanner_Parser_Patito.py',320),
  ('l_par_cycle -> LEFTPARENTHESIS','l_par_cycle',1,'p_l_par_cycle','Scanner_Parser_Patito.py',325),
  ('r_par_cycle -> RIGHTPARENTHESIS','r_par_cycle',1,'p_r_par_cycle','Scanner_Parser_Patito.py',332),
  ('condition -> IF left_par_condition expression right_par_condition body ef SEMICOLON','condition',7,'p_condition','Scanner_Parser_Patito.py',350),
  ('left_par_condition -> LEFTPARENTHESIS','left_par_condition',1,'p_left_par_condition','Scanner_Parser_Patito.py',360),
  ('right_par_condition -> RIGHTPARENTHESIS','right_par_condition',1,'p_right_par_condition','Scanner_Parser_Patito.py',367),
  ('ef -> empty','ef',1,'p_ef','Scanner_Parser_Patito.py',383),
  ('ef -> l','ef',1,'p_ef','Scanner_Parser_Patito.py',384),
  ('ef -> elif_ef left_par_ef expression right_par_ef body l','ef',6,'p_ef','Scanner_Parser_Patito.py',385),
  ('elif_ef -> ELSEIF','elif_ef',1,'p_elif_ef','Scanner_Parser_Patito.py',388),
  ('left_par_ef -> LEFTPARENTHESIS','left_par_ef',1,'p_left_par_ef','Scanner_Parser_Patito.py',398),
  ('right_par_ef -> RIGHTPARENTHESIS','right_par_ef',1,'p_right_par_ef','Scanner_Parser_Patito.py',405),
  ('l -> else_condition body','l',2,'p_l','Scanner_Parser_Patito.py',421),
  ('else_condition -> ELSE','else_condition',1,'p_else_condition','Scanner_Parser_Patito.py',425),
  ('expression -> exp j','expression',2,'p_expression','Scanner_Parser_Patito.py',438),
  ('j -> empty','j',1,'p_j','Scanner_Parser_Patito.py',441),
  ('j -> k exp','j',2,'p_j','Scanner_Parser_Patito.py',442),
  ('k -> GREATERTHAN','k',1,'p_k','Scanner_Parser_Patito.py',445),
  ('k -> LESSTHAN','k',1,'p_k','Scanner_Parser_Patito.py',446),
  ('k -> NOT','k',1,'p_k','Scanner_Parser_Patito.py',447),
  ('print -> cout_print LEFTPARENTHESIS g RIGHTPARENTHESIS semicolon_print','print',5,'p_print','Scanner_Parser_Patito.py',453),
  ('cout_print -> COUT','cout_print',1,'p_cout_print','Scanner_Parser_Patito.py',457),
  ('g -> h i','g',2,'p_g','Scanner_Parser_Patito.py',461),
  ('h -> expression_print','h',1,'p_h','Scanner_Parser_Patito.py',465),
  ('h -> CTE_STRING','h',1,'p_h','Scanner_Parser_Patito.py',466),
  ('expression_print -> expression','expression_print',1,'p_expression_print','Scanner_Parser_Patito.py',489),
  ('i -> empty','i',1,'p_i','Scanner_Parser_Patito.py',499),
  ('i -> COMA g','i',2,'p_i','Scanner_Parser_Patito.py',500),
  ('semicolon_print -> SEMICOLON','semicolon_print',1,'p_semicolon_print','Scanner_Parser_Patito.py',504),
  ('exp -> term e','exp',2,'p_exp','Scanner_Parser_Patito.py',515),
  ('e -> empty','e',1,'p_e','Scanner_Parser_Patito.py',523),
  ('e -> f exp','e',2,'p_e','Scanner_Parser_Patito.py',524),
  ('f -> ADD','f',1,'p_f','Scanner_Parser_Patito.py',528),
  ('f -> MINUS','f',1,'p_f','Scanner_Parser_Patito.py',529),
  ('term -> factor c','term',2,'p_term','Scanner_Parser_Patito.py',535),
  ('c -> empty','c',1,'p_c','Scanner_Parser_Patito.py',542),
  ('c -> d term','c',2,'p_c','Scanner_Parser_Patito.py',543),
  ('d -> MULTIPLY','d',1,'p_d','Scanner_Parser_Patito.py',547),
  ('d -> DIVIDE','d',1,'p_d','Scanner_Parser_Patito.py',548),
  ('factor -> left_par_factor expression right_par_factor','factor',3,'p_factor','Scanner_Parser_Patito.py',554),
  ('factor -> a b','factor',2,'p_factor','Scanner_Parser_Patito.py',555),
  ('left_par_factor -> LEFTPARENTHESIS','left_par_factor',1,'p_left_par_factor','Scanner_Parser_Patito.py',562),
  ('right_par_factor -> RIGHTPARENTHESIS','right_par_factor',1,'p_right_par_factor','Scanner_Parser_Patito.py',568),
  ('a -> empty','a',1,'p_a','Scanner_Parser_Patito.py',576),
  ('a -> ADD','a',1,'p_a','Scanner_Parser_Patito.py',577),
  ('a -> MINUS','a',1,'p_a','Scanner_Parser_Patito.py',578),
  ('b -> ID','b',1,'p_b','Scanner_Parser_Patito.py',585),
  ('b -> cte','b',1,'p_b','Scanner_Parser_Patito.py',586),
  ('type -> INT','type',1,'p_type','Scanner_Parser_Patito.py',619),
  ('type -> FLOAT','type',1,'p_type','Scanner_Parser_Patito.py',620),
  ('cte -> CTE_INT','cte',1,'p_cte','Scanner_Parser_Patito.py',636),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Scanner_Parser_Patito.py',637),
  ('empty -> <empty>','empty',0,'p_empty','Scanner_Parser_Patito.py',681),
]
