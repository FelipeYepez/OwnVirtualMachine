
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD COLON COMA COUT CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT GREATERTHAN ID IF INT LEFTBRACE LEFTPARENTHESIS LESSTHAN MINUS MULTIPLY NOT PROGRAM RIGHTBRACE RIGHTPARENTHESIS SEMICOLON VAR WHILEprogram : PROGRAM ID SEMICOLON r body END\n        r       : vars\n                | emptyvars : VAR o\n        o    : ID p\n        p    : COMA o\n                | COLON type SEMICOLON q\n        q    : empty\n                | obody : LEFTBRACE m RIGHTBRACE\n        m    : statement m\n                | emptystatement : assign\n                    | condition\n                    | cycle\n                    | printassign : ID EQUAL expression SEMICOLONcycle : DO body WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLONcondition : IF LEFTPARENTHESIS expression RIGHTPARENTHESIS body l SEMICOLON\n        l         : empty\n                    | ELSE bodyexpression : exp j\n        j          : empty\n                    | k exp\n        k          : GREATERTHAN\n                    | LESSTHAN\n                    | NOTprint : COUT LEFTPARENTHESIS g RIGHTPARENTHESIS SEMICOLON\n        g     : h i\n        h     : expression\n                | CTE_STRING\n        i     : empty\n                | COMA gexp : term e\n        e   : empty\n            | f term\n        f   : ADD\n            | MINUSterm : factor c\n        c    : empty\n                | d term\n        d    : MULTIPLY\n                | DIVIDEfactor : LEFTPARENTHESIS expression RIGHTPARENTHESIS\n                | a b\n        a      : empty\n                | ADD\n                | MINUS\n        b      : ID\n                | ctetype : INT\n                | FLOATcte : CTE_INT\n            | CTE_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,],[0,-1,]),'ID':([2,8,10,15,17,18,19,20,26,30,31,33,42,43,44,45,46,53,54,57,58,59,60,63,64,65,68,69,70,78,82,92,98,100,],[3,12,21,21,-13,-14,-15,-16,12,-55,-55,-55,-55,73,-46,-47,-48,12,-17,-55,-25,-26,-27,-55,-37,-38,-55,-42,-43,-55,-55,-28,-19,-18,]),'SEMICOLON':([3,28,35,36,37,38,39,40,41,55,56,61,62,66,67,72,73,74,75,76,79,86,87,88,89,90,94,95,97,99,],[4,-10,53,-51,-52,54,-55,-55,-55,-22,-23,-34,-35,-39,-40,-45,-49,-50,-53,-54,92,-24,-36,-41,-44,-55,98,-20,100,-21,]),'VAR':([4,],[8,]),'LEFTBRACE':([4,5,6,7,11,23,25,34,53,77,83,84,85,96,],[-55,10,-2,-3,-4,10,-5,-6,-55,10,-7,-8,-9,10,]),'END':([9,28,],[13,-10,]),'RIGHTBRACE':([10,14,15,16,17,18,19,20,29,54,92,98,100,],[-55,28,-55,-12,-13,-14,-15,-16,-11,-17,-28,-19,-18,]),'IF':([10,15,17,18,19,20,54,92,98,100,],[22,22,-13,-14,-15,-16,-17,-28,-19,-18,]),'DO':([10,15,17,18,19,20,54,92,98,100,],[23,23,-13,-14,-15,-16,-17,-28,-19,-18,]),'COUT':([10,15,17,18,19,20,54,92,98,100,],[24,24,-13,-14,-15,-16,-17,-28,-19,-18,]),'COMA':([12,39,40,41,50,51,52,55,56,61,62,66,67,72,73,74,75,76,86,87,88,89,],[26,-55,-55,-55,82,-30,-31,-22,-23,-34,-35,-39,-40,-45,-49,-50,-53,-54,-24,-36,-41,-44,]),'COLON':([12,],[27,]),'EQUAL':([21,],[30,]),'LEFTPARENTHESIS':([22,24,30,31,33,42,48,57,58,59,60,63,64,65,68,69,70,78,82,],[31,33,42,42,42,42,78,42,-25,-26,-27,42,-37,-38,42,-42,-43,42,42,]),'INT':([27,],[36,]),'FLOAT':([27,],[37,]),'WHILE':([28,32,],[-10,48,]),'ELSE':([28,90,],[-10,96,]),'ADD':([30,31,33,40,41,42,57,58,59,60,63,64,65,66,67,68,69,70,72,73,74,75,76,78,82,88,89,],[45,45,45,64,-55,45,45,-25,-26,-27,45,-37,-38,-39,-40,45,-42,-43,-45,-49,-50,-53,-54,45,45,-41,-44,]),'MINUS':([30,31,33,40,41,42,57,58,59,60,63,64,65,66,67,68,69,70,72,73,74,75,76,78,82,88,89,],[46,46,46,65,-55,46,46,-25,-26,-27,46,-37,-38,-39,-40,46,-42,-43,-45,-49,-50,-53,-54,46,46,-41,-44,]),'CTE_INT':([30,31,33,42,43,44,45,46,57,58,59,60,63,64,65,68,69,70,78,82,],[-55,-55,-55,-55,75,-46,-47,-48,-55,-25,-26,-27,-55,-37,-38,-55,-42,-43,-55,-55,]),'CTE_FLOAT':([30,31,33,42,43,44,45,46,57,58,59,60,63,64,65,68,69,70,78,82,],[-55,-55,-55,-55,76,-46,-47,-48,-55,-25,-26,-27,-55,-37,-38,-55,-42,-43,-55,-55,]),'CTE_STRING':([33,82,],[52,52,]),'RIGHTPARENTHESIS':([39,40,41,47,49,50,51,52,55,56,61,62,66,67,71,72,73,74,75,76,80,81,86,87,88,89,91,93,],[-55,-55,-55,77,79,-55,-30,-31,-22,-23,-34,-35,-39,-40,89,-45,-49,-50,-53,-54,-29,-32,-24,-36,-41,-44,97,-33,]),'GREATERTHAN':([39,40,41,61,62,66,67,72,73,74,75,76,87,88,89,],[58,-55,-55,-34,-35,-39,-40,-45,-49,-50,-53,-54,-36,-41,-44,]),'LESSTHAN':([39,40,41,61,62,66,67,72,73,74,75,76,87,88,89,],[59,-55,-55,-34,-35,-39,-40,-45,-49,-50,-53,-54,-36,-41,-44,]),'NOT':([39,40,41,61,62,66,67,72,73,74,75,76,87,88,89,],[60,-55,-55,-34,-35,-39,-40,-45,-49,-50,-53,-54,-36,-41,-44,]),'MULTIPLY':([41,72,73,74,75,76,89,],[69,-45,-49,-50,-53,-54,-44,]),'DIVIDE':([41,72,73,74,75,76,89,],[70,-45,-49,-50,-53,-54,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'r':([4,],[5,]),'vars':([4,],[6,]),'empty':([4,10,15,30,31,33,39,40,41,42,50,53,57,63,68,78,82,90,],[7,16,16,44,44,44,56,62,67,44,81,84,44,44,44,44,44,95,]),'body':([5,23,77,96,],[9,32,90,99,]),'o':([8,26,53,],[11,34,85,]),'m':([10,15,],[14,29,]),'statement':([10,15,],[15,15,]),'assign':([10,15,],[17,17,]),'condition':([10,15,],[18,18,]),'cycle':([10,15,],[19,19,]),'print':([10,15,],[20,20,]),'p':([12,],[25,]),'type':([27,],[35,]),'expression':([30,31,33,42,78,82,],[38,47,51,71,91,51,]),'exp':([30,31,33,42,57,78,82,],[39,39,39,39,86,39,39,]),'term':([30,31,33,42,57,63,68,78,82,],[40,40,40,40,40,87,88,40,40,]),'factor':([30,31,33,42,57,63,68,78,82,],[41,41,41,41,41,41,41,41,41,]),'a':([30,31,33,42,57,63,68,78,82,],[43,43,43,43,43,43,43,43,43,]),'g':([33,82,],[49,93,]),'h':([33,82,],[50,50,]),'j':([39,],[55,]),'k':([39,],[57,]),'e':([40,],[61,]),'f':([40,],[63,]),'c':([41,],[66,]),'d':([41,],[68,]),'b':([43,],[72,]),'cte':([43,],[74,]),'i':([50,],[80,]),'q':([53,],[83,]),'l':([90,],[94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON r body END','program',6,'p_program','Scanner_Parser_Patito.py',115),
  ('r -> vars','r',1,'p_program','Scanner_Parser_Patito.py',116),
  ('r -> empty','r',1,'p_program','Scanner_Parser_Patito.py',117),
  ('vars -> VAR o','vars',2,'p_vars','Scanner_Parser_Patito.py',121),
  ('o -> ID p','o',2,'p_vars','Scanner_Parser_Patito.py',122),
  ('p -> COMA o','p',2,'p_vars','Scanner_Parser_Patito.py',123),
  ('p -> COLON type SEMICOLON q','p',4,'p_vars','Scanner_Parser_Patito.py',124),
  ('q -> empty','q',1,'p_vars','Scanner_Parser_Patito.py',125),
  ('q -> o','q',1,'p_vars','Scanner_Parser_Patito.py',126),
  ('body -> LEFTBRACE m RIGHTBRACE','body',3,'p_body','Scanner_Parser_Patito.py',130),
  ('m -> statement m','m',2,'p_body','Scanner_Parser_Patito.py',131),
  ('m -> empty','m',1,'p_body','Scanner_Parser_Patito.py',132),
  ('statement -> assign','statement',1,'p_statement','Scanner_Parser_Patito.py',136),
  ('statement -> condition','statement',1,'p_statement','Scanner_Parser_Patito.py',137),
  ('statement -> cycle','statement',1,'p_statement','Scanner_Parser_Patito.py',138),
  ('statement -> print','statement',1,'p_statement','Scanner_Parser_Patito.py',139),
  ('assign -> ID EQUAL expression SEMICOLON','assign',4,'p_assign','Scanner_Parser_Patito.py',143),
  ('cycle -> DO body WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON','cycle',7,'p_cycle','Scanner_Parser_Patito.py',147),
  ('condition -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS body l SEMICOLON','condition',7,'p_condition','Scanner_Parser_Patito.py',151),
  ('l -> empty','l',1,'p_condition','Scanner_Parser_Patito.py',152),
  ('l -> ELSE body','l',2,'p_condition','Scanner_Parser_Patito.py',153),
  ('expression -> exp j','expression',2,'p_expression','Scanner_Parser_Patito.py',157),
  ('j -> empty','j',1,'p_expression','Scanner_Parser_Patito.py',158),
  ('j -> k exp','j',2,'p_expression','Scanner_Parser_Patito.py',159),
  ('k -> GREATERTHAN','k',1,'p_expression','Scanner_Parser_Patito.py',160),
  ('k -> LESSTHAN','k',1,'p_expression','Scanner_Parser_Patito.py',161),
  ('k -> NOT','k',1,'p_expression','Scanner_Parser_Patito.py',162),
  ('print -> COUT LEFTPARENTHESIS g RIGHTPARENTHESIS SEMICOLON','print',5,'p_print','Scanner_Parser_Patito.py',166),
  ('g -> h i','g',2,'p_print','Scanner_Parser_Patito.py',167),
  ('h -> expression','h',1,'p_print','Scanner_Parser_Patito.py',168),
  ('h -> CTE_STRING','h',1,'p_print','Scanner_Parser_Patito.py',169),
  ('i -> empty','i',1,'p_print','Scanner_Parser_Patito.py',170),
  ('i -> COMA g','i',2,'p_print','Scanner_Parser_Patito.py',171),
  ('exp -> term e','exp',2,'p_exp','Scanner_Parser_Patito.py',175),
  ('e -> empty','e',1,'p_exp','Scanner_Parser_Patito.py',176),
  ('e -> f term','e',2,'p_exp','Scanner_Parser_Patito.py',177),
  ('f -> ADD','f',1,'p_exp','Scanner_Parser_Patito.py',178),
  ('f -> MINUS','f',1,'p_exp','Scanner_Parser_Patito.py',179),
  ('term -> factor c','term',2,'p_term','Scanner_Parser_Patito.py',183),
  ('c -> empty','c',1,'p_term','Scanner_Parser_Patito.py',184),
  ('c -> d term','c',2,'p_term','Scanner_Parser_Patito.py',185),
  ('d -> MULTIPLY','d',1,'p_term','Scanner_Parser_Patito.py',186),
  ('d -> DIVIDE','d',1,'p_term','Scanner_Parser_Patito.py',187),
  ('factor -> LEFTPARENTHESIS expression RIGHTPARENTHESIS','factor',3,'p_factor','Scanner_Parser_Patito.py',191),
  ('factor -> a b','factor',2,'p_factor','Scanner_Parser_Patito.py',192),
  ('a -> empty','a',1,'p_factor','Scanner_Parser_Patito.py',193),
  ('a -> ADD','a',1,'p_factor','Scanner_Parser_Patito.py',194),
  ('a -> MINUS','a',1,'p_factor','Scanner_Parser_Patito.py',195),
  ('b -> ID','b',1,'p_factor','Scanner_Parser_Patito.py',196),
  ('b -> cte','b',1,'p_factor','Scanner_Parser_Patito.py',197),
  ('type -> INT','type',1,'p_type','Scanner_Parser_Patito.py',201),
  ('type -> FLOAT','type',1,'p_type','Scanner_Parser_Patito.py',202),
  ('cte -> CTE_INT','cte',1,'p_cte','Scanner_Parser_Patito.py',206),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Scanner_Parser_Patito.py',207),
  ('empty -> <empty>','empty',0,'p_empty','Scanner_Parser_Patito.py',212),
]
